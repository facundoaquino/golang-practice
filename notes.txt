
- When you’re writing code that will live in its own
package, it’s good practice to name the package the same as the folder the code is in.
All the Go tooling expects this convention, so it’s a good practice to follow.


- It’s a convention in Go to give factory functions the name of New. This New function does something
interesting: it creates a value of the unexported type and returns that value back
to the caller.         


*****CONCURRENCIA****

-The Go runtime scheduler is a sophisticated piece of software that manages all
the goroutines that are created and need processor time.

-When two or more goroutines have unsynchronized access to a shared resource and
attempt to read and write to that resource at the same time, you have what’s called a
race condition. Race conditions are the reason concurrent programming is complicated
and has a greater potential for bugs. Read and write operations against a
shared resource

go build -race

-Unbuffered channels provide a guarantee between an exchange of data. Buffered
channels do not.



***********  FORMATTING CODE AND FIND ERROR WITH GO FMT AND GO VET*************


The Go development tools include a command, go fmt , which automatically
fixes the whitespace in your code to match the standard format. However, it
can’t fix braces on the wrong line. Run it with the following:
$ go fmt ./...
hello.go
Using ./... tells a Go tool to apply the command to all the files in the current
directory and all subdirectories. You will see it again as you learn about more Go
tools.
If you open up hello.go, you’ll see that the line with fmt.Println is now
properly indented with a single tab.

Just as you should run go fmt to make sure your code is formatted properly, run go vet to scan for
possible bugs in valid code. These commands are just the first step in ensuring that your code is of high
quality. In addition to the advice in this book, all Go developers should read through Effective Go and the
Code Review Comments page on Go’s wiki to understand what idiomatic Go code looks like.